{
  "permissions": {
    "allow": [
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd OnbButtonStyle with ButtonStyle protocol and press animations\n\n- Create OnbButtonStyleType enum with solid, outline, solidOutline, and duolingo styles\n- Each style has associated values for only the colors it needs\n- Implement OnbButtonPressStyle enum with press, opacity, and tap animations\n- Create OnbButtonStyle conforming to ButtonStyle protocol\n- Add invisible background to outline style for full tappability\n- Implement special duolingo animation with shadow offset on press\n- Add onbButtonStyle extension for clean API with trailing closure syntax\n- Include comprehensive previews demonstrating all styles and animations\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nFix duolingo button press animation to move text with button layers\n\n- Shadow layer now stays fixed at bottom (doesn''t move when pressed)\n- Main button, highlight, and text label all move together when pressed\n- Creates authentic \"pressing into shadow\" effect where entire button content compresses down\n- Duolingo style uses its own custom animation independent of OnbButtonPressStyle\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd isSelected state and animations to OnbButtonStyle\n\n- Add isSelected parameter to OnbButtonStyle with appropriate colors for each style\n- Solid: selectedBackgroundColor and selectedTextColor\n- Outline: selectedTextColor and selectedBorderColor (no background fill)\n- SolidOutline: all three selected color options\n- Duolingo: selected colors for background, text, and shadow\n- Add smooth 0.2s ease-in-out animations for state transitions\n- Update Preview with interactive @State that toggles on any button tap\n- Fix outline style to remain outline when selected (no background fill)\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd OnbButtonContent component with flexible secondary content placement\n\n- Create OnbButtonContent component for button text content\n- Add OnbButtonSecondaryContent enum with .emoji option\n- Add OnbButtonSecondaryContentPlacement with four layout options\n- Leading/trailing: text centered with emoji at edges using ZStack\n- CenterLeading/centerTrailing: text and emoji grouped together with HStack\n- Implement separate view builders for each placement case\n- Add comprehensive preview examples showing all placement options\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd textPlacement and horizontalPadding to OnbButtonContent\n\n- Add OnbButtonTextPlacement enum with center and leading options\n- Center placement keeps text centered with emoji at edges (default)\n- Leading placement aligns text and content to the left\n- Update leadingView and trailingView to handle both text placements\n- Add horizontalPadding parameter with default value of 12\n- Wrap Preview in ScrollView for better navigation\n- Add comprehensive examples showing all placement combinations\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd checkbox support to OnbButtonContent with customizable colors\n\n- Add OnbCheckboxStyle enum with circle and square options\n- Add checkbox case to OnbButtonSecondaryContent with style, isChecked, borderColor, and fillColor parameters\n- Circle style shows filled circle when checked, square style shows checkmark icon\n- Add interactive Preview with @State for toggling checkbox states\n- Update Preview to demonstrate custom colors for checkboxes\n- Fix Select Option to maintain blue text when selected in outline style\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd media support to OnbButtonContent and make AnyMediaView flexible\n\n- Add .media case to OnbButtonSecondaryContent with OnbMediaType\n- Remove all hardcoded frames from AnyMediaView for flexibility\n- Make system icons resizable with aspect ratio fit\n- Update preview to demonstrate flexible sizing\n- Allow buttons to display icons, images, videos, and Lottie animations\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nReorder OnbButtonContent parameters for better API design\n\n- Move textPlacement to be second parameter after text\n- Update all preview examples to use new parameter order\n- Improves API clarity by grouping text with its placement\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nRemove hardcoded values from all media loader views\n\n- VideoLoaderView: Add injectable cornerRadius parameter (default: 0)\n- LottieLoaderView: Add injectable cornerRadius parameter (default: 0)  \n- ImageLoaderView: Add injectable placeholderOpacity parameter (default: 0.5)\n- All loader views are now fully flexible without hardcoded frames, paddings, or corners\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd cornerRadius parameter to AnyMediaView and inject into loader views\n\n- Add cornerRadius parameter to AnyMediaView (default: 0)\n- Pass cornerRadius to VideoLoaderView when creating video media\n- Pass cornerRadius to LottieLoaderView when creating lottie media\n- ImageLoaderView doesn''t need cornerRadius as it uses overlay approach\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd loop parameters to OnbMediaType for video and Lottie animations\n\n- Add loop: Bool parameter to video case (default: true)\n- Add loopMode: LottieLoopMode parameter to lottie case (default: .loop)\n- Update VideoLoaderView to accept and use loop parameter\n- Pass loop parameter to SimpleVideoPlayerView for conditional looping\n- Update AnyMediaView to extract and pass loop parameters to loader views\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(swift build)",
      "Bash(git add Sources/SwiftfulOnboarding/Components/Media/AnyMediaView.swift Sources/SwiftfulOnboarding/Models/OnbMediaType.swift Sources/SwiftfulOnboarding/Models/OnbSlideType.swift Sources/SwiftfulOnboarding/Slides/AnyOnboardingSlideView.swift Sources/SwiftfulOnboarding/Slides/RegularSlideView.swift)",
      "Bash(git commit -m \"$(cat <<''EOF''\nEnhance RegularSlideView with configurable CTA, media sizing, and positioning\n\n- Replace inline button with OnbButtonStyle modifier for consistency\n- Add ctaText and ctaButtonStyle parameters with sensible defaults\n- Create OnbMediaSize enum with .fixed, .max, .small, .medium, .large options\n- Implement device-aware sizing: iPhone (64/180/300), iPad (120/300/450)\n- Add OnbMediaPosition enum with .top and .bottom placement options\n- Move cornerRadius from AnyMediaView parameter into OnbMediaType cases\n- Add cornerRadius support to .image, .video, and .lottie media types\n- Update OnbSlideType to include all new parameters with defaults\n- Update AnyOnboardingSlideView to pass through new configuration\n- Update preview to demonstrate various size and position combinations\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add Sources/SwiftfulOnboarding/Components/OnbTitleContent.swift Sources/SwiftfulOnboarding/Models/OnbSlideType.swift Sources/SwiftfulOnboarding/Slides/AnyOnboardingSlideView.swift Sources/SwiftfulOnboarding/Slides/RegularSlideView.swift)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd OnbTitleContent component with configurable fonts and spacing\n\n- Create OnbTitleContent component to house title and subtitle\n- Add titleFont parameter (default: .largeTitle)\n- Add subtitleFont parameter (default: .body)\n- Add spacing parameter for title/subtitle spacing (default: 12)\n- Update RegularSlideView to use OnbTitleContent\n- Add titleFont, subtitleFont, and titleSubtitleSpacing parameters to RegularSlideView\n- Update OnbSlideType to include font and spacing parameters with defaults\n- Update AnyOnboardingSlideView to pass through new parameters\n- Include comprehensive preview demonstrating various font and spacing combinations\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd text alignment support to OnbTitleContent with OnbTextAlignment enum\n\n- Create OnbTextAlignment enum with .leading, .center, .trailing cases\n- Add textAlignment computed property for TextAlignment conversion\n- Add frameAlignment computed property for Alignment conversion\n- Add alignment parameter to OnbTitleContent (default: .center)\n- Apply alignment to both title and subtitle with .frame(maxWidth:alignment:)\n- Add titleAlignment parameter to RegularSlideView\n- Update OnbSlideType to include titleAlignment with default\n- Update AnyOnboardingSlideView to pass through alignment parameter\n- Update preview to demonstrate all three alignment options\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git add Sources/SwiftfulOnboarding/Models/OnbSlideType.swift Sources/SwiftfulOnboarding/Slides/AnyOnboardingSlideView.swift Sources/SwiftfulOnboarding/Slides/RegularSlideView.swift)",
      "Bash(git commit -m \"$(cat <<''EOF''\nAdd contentAlignment to RegularSlideView for vertical positioning\n\n- Create OnbContentAlignment enum with .top, .center, .bottom cases\n- Add alignment computed property to convert to SwiftUI Alignment\n- Add contentAlignment parameter to RegularSlideView (default: .center)\n- Remove Spacer() from content VStack\n- Apply contentAlignment to .frame(maxWidth:maxHeight:alignment:)\n- Add contentAlignment parameter to OnbSlideType with default\n- Update AnyOnboardingSlideView to pass through contentAlignment\n- Update preview to demonstrate all three vertical alignment options\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
